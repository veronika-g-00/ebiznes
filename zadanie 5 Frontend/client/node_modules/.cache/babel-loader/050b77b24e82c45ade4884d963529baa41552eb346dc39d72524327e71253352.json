{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\veron\\\\Desktop\\\\INFORMATYKA STOSOWANA\\\\Semestr II\\\\Ebiznes\\\\zadanie 5 Frontend\\\\client\\\\src\\\\Platnosci.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react'; // Dodano useEffect\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Platnosci({\n  totalPrice\n}) {\n  _s();\n  // Otrzymujemy totalPrice jako prop\n  // Usunęliśmy useState dla kwoty\n  const [metodaPlatnosci, setMetodaPlatnosci] = useState('karta');\n  const [statusWysylki, setStatusWysylki] = useState('');\n\n  // Formatowanie ceny do wyświetlenia\n  const formattedTotalPrice = totalPrice.toFixed(2);\n\n  // Resetuj status wysyłki, gdy zmieni się kwota (np. po usunięciu czegoś z koszyka)\n  useEffect(() => {\n    setStatusWysylki('');\n  }, [totalPrice]);\n  const handleSubmit = async event => {\n    event.preventDefault();\n    setStatusWysylki('Wysyłanie danych...');\n\n    // Używamy totalPrice przekazanego jako prop\n    const daneDoWyslania = {\n      kwota: totalPrice,\n      // Używamy przekazanej kwoty\n      metoda: metodaPlatnosci\n      // Można by tu dodać też np. listę ID produktów z koszyka, jeśli backend by tego wymagał\n      // items: cartItems.map(item => item.id)\n    };\n\n    // Walidacja czy kwota jest poprawna (większa od 0)\n    if (totalPrice <= 0) {\n      setStatusWysylki('Koszyk jest pusty lub suma jest nieprawidłowa.');\n      return; // Przerwij, jeśli kwota jest 0 lub ujemna\n    }\n    try {\n      const odpowiedz = await fetch('/api/payments', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(daneDoWyslania)\n      });\n      if (!odpowiedz.ok) {\n        let errorMsg = `HTTP error! status: ${odpowiedz.status}`;\n        try {\n          const errorBody = await odpowiedz.json();\n          errorMsg += ` - ${errorBody.message || JSON.stringify(errorBody)}`;\n        } catch (e) {/* Ignoruj */}\n        throw new Error(errorMsg);\n      }\n      setStatusWysylki('Płatność przetworzona pomyślnie!');\n      // Nie czyścimy już kwoty, bo zależy od koszyka\n      setMetodaPlatnosci('karta');\n      // Można by tu dodać logikę czyszczenia koszyka w App.js po udanej płatności\n      // np. przez wywołanie funkcji przekazanej jako prop onPaymentSuccess()\n    } catch (error) {\n      console.error(\"Błąd podczas wysyłania płatności:\", error);\n      setStatusWysylki(`Błąd: ${error.message || 'Nie udało się przetworzyć płatności.'}`);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"P\\u0142atno\\u015B\\u0107\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"kwota\",\n          children: \"Kwota do zap\\u0142aty:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\" // Zmieniono typ na text, bo number może źle formatować\n          ,\n          id: \"kwota\",\n          value: `${formattedTotalPrice} PLN` // Wyświetlamy sformatowaną kwotę z jednostką\n          ,\n          readOnly: true // Pole tylko do odczytu\n          ,\n          style: {\n            marginLeft: '5px',\n            fontWeight: 'bold'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"metoda\",\n          children: \"Metoda p\\u0142atno\\u015Bci:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          id: \"metoda\",\n          value: metodaPlatnosci,\n          onChange: e => setMetodaPlatnosci(e.target.value),\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"karta\",\n            children: \"Karta kredytowa\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"blik\",\n            children: \"BLIK\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"przelew\",\n            children: \"Przelew bankowy\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        disabled: totalPrice <= 0,\n        children: [\"Zap\\u0142a\\u0107 (\", formattedTotalPrice, \" PLN)\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), statusWysylki && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: statusWysylki\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 25\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n}\n_s(Platnosci, \"XKvMgsvxhsw4/FPARWPpjocQn4s=\");\n_c = Platnosci;\nexport default Platnosci;\nvar _c;\n$RefreshReg$(_c, \"Platnosci\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Platnosci","totalPrice","_s","metodaPlatnosci","setMetodaPlatnosci","statusWysylki","setStatusWysylki","formattedTotalPrice","toFixed","handleSubmit","event","preventDefault","daneDoWyslania","kwota","metoda","odpowiedz","fetch","method","headers","body","JSON","stringify","ok","errorMsg","status","errorBody","json","message","e","Error","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","htmlFor","type","id","value","readOnly","style","marginLeft","fontWeight","onChange","target","disabled","_c","$RefreshReg$"],"sources":["C:/Users/veron/Desktop/INFORMATYKA STOSOWANA/Semestr II/Ebiznes/zadanie 5 Frontend/client/src/Platnosci.js"],"sourcesContent":["import React, { useState, useEffect } from 'react'; // Dodano useEffect\r\n\r\nfunction Platnosci({ totalPrice }) { // Otrzymujemy totalPrice jako prop\r\n  // Usunęliśmy useState dla kwoty\r\n  const [metodaPlatnosci, setMetodaPlatnosci] = useState('karta');\r\n  const [statusWysylki, setStatusWysylki] = useState('');\r\n\r\n  // Formatowanie ceny do wyświetlenia\r\n  const formattedTotalPrice = totalPrice.toFixed(2);\r\n\r\n  // Resetuj status wysyłki, gdy zmieni się kwota (np. po usunięciu czegoś z koszyka)\r\n   useEffect(() => {\r\n    setStatusWysylki('');\r\n  }, [totalPrice]);\r\n\r\n\r\n  const handleSubmit = async (event) => {\r\n    event.preventDefault();\r\n    setStatusWysylki('Wysyłanie danych...');\r\n\r\n    // Używamy totalPrice przekazanego jako prop\r\n    const daneDoWyslania = {\r\n      kwota: totalPrice, // Używamy przekazanej kwoty\r\n      metoda: metodaPlatnosci,\r\n      // Można by tu dodać też np. listę ID produktów z koszyka, jeśli backend by tego wymagał\r\n      // items: cartItems.map(item => item.id)\r\n    };\r\n\r\n    // Walidacja czy kwota jest poprawna (większa od 0)\r\n    if (totalPrice <= 0) {\r\n        setStatusWysylki('Koszyk jest pusty lub suma jest nieprawidłowa.');\r\n        return; // Przerwij, jeśli kwota jest 0 lub ujemna\r\n    }\r\n\r\n\r\n    try {\r\n      const odpowiedz = await fetch('/api/payments', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(daneDoWyslania),\r\n      });\r\n\r\n      if (!odpowiedz.ok) {\r\n         let errorMsg = `HTTP error! status: ${odpowiedz.status}`;\r\n         try {\r\n            const errorBody = await odpowiedz.json();\r\n            errorMsg += ` - ${errorBody.message || JSON.stringify(errorBody)}`;\r\n         } catch(e) { /* Ignoruj */ }\r\n         throw new Error(errorMsg);\r\n      }\r\n\r\n      setStatusWysylki('Płatność przetworzona pomyślnie!');\r\n      // Nie czyścimy już kwoty, bo zależy od koszyka\r\n      setMetodaPlatnosci('karta');\r\n      // Można by tu dodać logikę czyszczenia koszyka w App.js po udanej płatności\r\n      // np. przez wywołanie funkcji przekazanej jako prop onPaymentSuccess()\r\n    } catch (error) {\r\n      console.error(\"Błąd podczas wysyłania płatności:\", error);\r\n      setStatusWysylki(`Błąd: ${error.message || 'Nie udało się przetworzyć płatności.'}`);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Płatność</h2>\r\n      <form onSubmit={handleSubmit}>\r\n        <div>\r\n          <label htmlFor=\"kwota\">Kwota do zapłaty:</label>\r\n          <input\r\n            type=\"text\" // Zmieniono typ na text, bo number może źle formatować\r\n            id=\"kwota\"\r\n            value={`${formattedTotalPrice} PLN`} // Wyświetlamy sformatowaną kwotę z jednostką\r\n            readOnly // Pole tylko do odczytu\r\n            style={{ marginLeft: '5px', fontWeight: 'bold' }}\r\n          />\r\n        </div>\r\n        <div>\r\n          <label htmlFor=\"metoda\">Metoda płatności:</label>\r\n          <select\r\n            id=\"metoda\"\r\n            value={metodaPlatnosci}\r\n            onChange={(e) => setMetodaPlatnosci(e.target.value)}\r\n          >\r\n            <option value=\"karta\">Karta kredytowa</option>\r\n            <option value=\"blik\">BLIK</option>\r\n            <option value=\"przelew\">Przelew bankowy</option>\r\n          </select>\r\n        </div>\r\n        {/* Przycisk Zapłać jest aktywny tylko jeśli suma > 0 */}\r\n        <button type=\"submit\" disabled={totalPrice <= 0}>\r\n             Zapłać ({formattedTotalPrice} PLN)\r\n        </button>\r\n      </form>\r\n      {statusWysylki && <p>{statusWysylki}</p>}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Platnosci;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}